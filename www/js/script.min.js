var root = 'file:///';

var display = {
  // Vars
  duration: 300,
  screens: $(".screen"),
  overlays: $(".overlay"),
  // Methods
  // Show/Hide a screen
  show: function(show, element, callback, hideOthers){
    // Dom element
    var el = $("."+element);
    // Hide or show
    var display = show ? 'fadeIn' : 'fadeOut';
    // Check if need to hide other screen
    if(hideOthers)
      this.screens.not('.'+element).fadeOut(this.duration);
    // Show element
    el[display](this.duration, function(){
      // If callback exist, execute it
      if(callback)
        callback();
    });
  },
  // Show/Hide an overlay, slide animation
  slide: function(type, element, callback){
    // Dom element
    var el = element ? $("."+element) : this.overlays;
    // Hide or show animation
    var left = type == 'show' ? 0 : '-100%';
    // Show element
    el.animate({
      left: left
    }, 300, function(){
      // If callback exist, execute it
      if(callback)
        callback();
    })
  }
};

var error = {
  // Methods
  // Check if enought musics have been found to run the app
  musicLength: function(musics){
    if(musics.length < 1){
      this.display(10);
      return false;
    }
    else
      return true;
  },
  // Display a given error message
  display: function(error, optional){
    var message; // Error message
    // Error message handler
    switch(error){
      // Custom error messages
      // No songs
      case 10 :
        message = 'Sorry but we didn\'t found any songs on your phone.';
      break;
    };
  },
};

var game = {
  // Game parameters
  choices: 4, // Number of available answers
  // Methods
  // Start game
  start: function(){
    // Enable controls
    this.controls();
    // Show main menu
    display.show(true, 'main-menu', false, true);
  },
  // Initialize game controls
  controls: function(){
    var _this = this;
    // Open options menu
    $(".options-game").click(function(){
      display.slide('show', 'options');
    });
    // Close options menu
    $(".options .close").click(function(){
      display.slide('hide', 'options');
    });
    // Return to menu
    $(".options .return-menu").click(function(){
      // Pause game
      _this.pause();
      // Show main menu
      display.show(true, 'main-menu', false, true);
      // Hide overlays
      display.slide('hide');
    });
  },
  // Pause the game
  pause: function(){

  },
};

var scan = {
  // Vars
  folders: 0, // Number of folder found during the scan
  files: 0, // Number of files found during the scan
  scannedFolders: 0, // Number of folder scanned
  scannedFiles: 0, // Number
  finished: false, // Check if scan already finished
  directories: [], // Directories to scan
  musics: [], // Musics found ont the device
  // List directories in which we'll look for the files we want
  listDirectories: function(){
    var _this = this;
    var directory;
    // In case the user wants to refresh his inapp song list
    this.finished = false;
    // Show loader
    display.show(true, 'loader', function(){
      // Loop through cordova.file directories
      for(directory in cordova.file){
        var current = cordova.file[directory];
        if(current == null || typeof current == 'undefined')
          continue;

        current = _this.stripDirectory(current);
        if(_this.directories.indexOf(current) != -1)
          continue;

        _this.directories.push(current);
      }
      _this.initScan();
    }, true);
  },
  // Launch scan for each principal directories
  initScan: function(){
    var _this = this;
    var i = 0;
    var nbDirectories = this.directories.length;
    for(i; i < nbDirectories; i++){
      var directory = this.directories[i];
      window.resolveLocalFileSystemURL(directory, function(dir, callback){
        _this.folders++;
        _this.scanDirectory(dir);
      });
    }
  },
  // Scan the given directory for files or other directories
  scanDirectory: function(directory){
    var _this = this;
    // Initiate a reader
    var reader = directory.createReader();
    // List entries in directory
    reader.readEntries(function(entries){
      var i = 0;
      var nbEntries = entries.length;
      // Loop through each entries in directory
      for(i; i < nbEntries; i++){
        var entry = entries[i];
        // If entry is a directory, scan the directory
        if(entry.isDirectory){
          _this.folders++;
          _this.scanDirectory(entry);
        }
        // If entry is a file, check type
        else{
          // If it's an audio file add it to the musics
          window.resolveLocalFileSystemURL(entry.nativeURL, function(file, callback){
            _this.files++;
            file.file(function(file){
              // Check if file type is defined
              if(file.type != null && typeof file.type != 'undefined'){
                // Check if file is an audio file
                if(file.type.indexOf('audio') != -1)
                  _this.musics.push(file.localURL);
              }
              // File scanned !
              _this.scannedFiles++;
              // Check if all folders and files have been scanned
              if(_this.scannedFiles == _this.files && _this.scannedFolders == _this.folders && !_this.finished){
                _this.finished = true;
                _this.returnApp();
              }
            });
          });
          // Old method
          // if(entry.nativeURL.indexOf('\.mp3') != -1)
          //   _this.musics.push(entry.nativeURL);
        }
      }
      // Directory scanned !
      _this.scannedFolders++;
      // Check if all folders and files have been scanned
      if(_this.scannedFiles == _this.files && _this.scannedFolders == _this.folders && !_this.finished){
        _this.finished = true;
        _this.returnApp();
      }
    });
  },
  // Return what was found to the app
  returnApp: function(){
    storage.getMusics(this.musics);
  },
  // Strip directory to one folder after root
  stripDirectory: function(directory){
    directory = directory.split(root)[1].split('/')[0];
    return root + directory + '/';
  },
};

var storage = {
  // Vars
  musics: [],
  // Methods
  // Get musics from scan
  getMusics: function(musics){
    if(error.musicLength(musics))
      this.store(musics);
  },
  // Store founded music in current app instance and local storage
  store: function(musics){
    var _this = this;
    var i = 0;
    var treated = 0; // Count treated files (because of async file function)
    var nbMusics = musics.length;
    // Loop through each music to get metadata
    for(i; i < nbMusics; i++){
      window.resolveLocalFileSystemURL(musics[i], function(music, callback){
        // Get file metadata
        music.file(function(file){
          // Check if music already exists in list
          if(!_this.exist(file))
            _this.musics.push(file);
          treated++;
          // Check if all musics have been scanned
          if(treated == nbMusics){
            _this.localStore();
            game.start();
          }
        });
      });
    }
  },
  // Store musics in device's localStorage
  localStore: function(){
    window.localStorage.removeItem('musics');
    window.localStorage.setItem('musics', JSON.stringify(this.musics));
  },
  // Get device's music stocked in localStorage
  getLocalStore: function(){
    var musics = window.localStorage.getItem('musics');
    // If music is found in localStorage
    if(musics != null && typeof musics != 'undefined'){
      // Parse it to set app's musics
      this.musics = JSON.parse(musics);
      return true;
    }
    return false;
  },
  // Check if file already in musics
  exist: function(file){
    var i = 0;
    var nbMusics = this.musics.length;
    // Loop through each music to check if file already in here
    for(i; i < nbMusics; i++){
      // Check if files have the same name
      if(this.musics[i].name == file.name){
        // Check if files are of the same size
        if(this.musics[i].size == file.size){
          // Check if files have the same duration
          if(this.musics[i].end == file.end)
            return true;
        }
      }
    }
    // File doesn't exist
    return false;
  },
};

var app = {
  // Methods
  // Launch app when device is ready
  init: function(){
    document.addEventListener('deviceready', this.ready, false);
  },
  // Launch directories listing
  ready: function(){
    var _this = app;
    // Check if scan already occured
    if(storage.getLocalStore())
      game.start();
    // Launch device scan
    else
      scan.listDirectories();
  }
};

// Initialize the app
app.init();
