var root = 'file:///';
var debug = false;

var display = {
  // Vars
  duration: 300,
  screens: $(".screen"),
  overlays: $(".overlay"),
  // Methods
  // Show/Hide a screen
  show: function(show, element, callback, hideOthers){
    // Dom element
    var el = $("."+element);
    // Hide or show
    var display = show ? 'fadeIn' : 'fadeOut';
    // Check if need to hide other screen
    if(hideOthers)
      this.screens.not('.'+element).fadeOut(this.duration);
    // Show element
    el[display](this.duration, function(){
      // If callback exist, execute it
      if(callback)
        callback();
    });
  },
  // Show/Hide an overlay, slide animation
  slide: function(type, element, callback){
    // Dom element
    var el = element ? $("."+element) : this.overlays;
    // Hide or show animation
    var left = type == 'show' ? 0 : '-100%';
    // Show element
    el.animate({
      left: left
    }, 300, function(){
      // If callback exist, execute it
      if(callback)
        callback();
    })
  }
};

var error = {
  // Methods
  // Check if enought musics have been found to run the app
  musicLength: function(musics){
    if(musics.length < 1){
      this.display(10);
      return false;
    }
    else
      return true;
  },
  // Display a given error message
  display: function(error, optional){
    var message; // Error message
    // Error message handler
    switch(error){
      // Custom error messages
      // No songs
      case 10 :
        message = 'Sorry but we didn\'t found any songs on your phone.';
      break;
      // All musics found
      case 20 :
        message = 'Good job you recognize all you songs !';
      break;
    };
  },
};

var game = {
  // Game parameters
  nbChoices: 4, // Number of available answers
  choicesContainer: $(".game .choices"), // Choices container dom element
  scoreContainer: $(".game .score"),
  foundContainer: $(".game .found"),
  totalContainer: $(".game .total"),
  loadGame: $(".main-menu .load-game"),
  // Vars
  started: false, // Check if game started, no call to controls twice
  musics: [], // Game musics
  remain: [], // Remaining musics to find
  choices: [], // Current question choices
  score: 0, // Player score
  found: 0, // Musics found
  music: {}, // Current played music
  // Methods
  // Start game
  start: function(){
    // Enable controls if initial start
    if(!this.started)
      this.controls();
    // Game started
    this.started = true;
    // Check for existing game
    if(storage.game())
      this.loadGame.removeClass('btn-disabled');
    // Show main menu
    display.show(true, 'main-menu', false, true);
  },
  // Start a new game
  new: function(){
    // Reset game, if needed
    this.reset();
    // Set total music
    this.totalContainer.text(this.musics.length)
    // Give first question
    this.question(function(){
      display.show(true, 'game', false, true);
    });
  },
  // Load an existing game
  load: function(){
    // Get saved datas
    var data = storage.load();
    // Update score
    this.score = data.score;
    // Update found musics
    this.found = data.found;
    // Update remaining musics
    this.remain = data.remain;
    // Set total music
    this.totalContainer.text(this.musics.length)
    // Update score
    this.stats();
    // Give first question
    this.question(function(){
      display.show(true, 'game', false, true);
    });
  },
  // Display a question
  question: function(callback){
    // Remove previous questions
    this.choicesContainer.empty();
    // Stop music
    if(this.music.media)
      this.music.media.stop();
    // Reset music
    this.music = {};
    // Reset choices
    this.choices = [];
    // Check musics remain < game choices
    if(this.remain.length < this.nbChoices)
      this.nbChoices = this.remain.length;
    // Check if all musics have been found
    if(this.remain.length == 0){
      // Display all musics found message
      error.display(20);
      return false;
    }

    // Question vars
    var exclusion = []; // Songs to exclude (already in choices)
    var remain = this.remain.length - 1; // Length array remaining musics
    var btns = []; // Buttons html elements
    var i = 0; // Iteration var

    // Questions creation
    for(i; i < this.nbChoices; i++){
      // Get random integer
      var rand = this.getRand(0, remain, exclusion);
      // Get random music
      var music = this.remain[rand];
      // Push music in choices
      this.choices.push(music);
      // Exclude choosen music
      exclusion.push(rand);
      // Create button
      btns.push($("<button class='btn' name='"+music.name+"'>"+music.stripName+"</button>"));
    }

    // Shuffle choices and buttons
    btn = this.shuffle(btns);
    this.choices = this.shuffle(this.choices);

    // Append buttons
    var j = 0;
    var nbBtns = btns.length;
    for(j; j < nbBtns; j++) this.choicesContainer.append(btns[j]);

    // Play a music
    this.music.media = new Media(this.choices[0].localURL);
    this.music.data = this.choices[0];
    this.music.media.play();

    // Call callback if exist
    if(callback)
      callback();
  },
  // Check if answer is correct
  answer: function(el){
    // Get answer music name
    var name = el.attr('name');
    // Check if answer is correct
    if(name == this.music.data.name){
      // If correct add 1 point
      this.score++;
      // Add music found
      this.found++;
      // Remove the music from the remaining
      var i = 0; // Loop iteration
      var nbRemain = this.remain.length; // Number of remaining
      for(i; i < nbRemain; i++){
        // If current music is the one from the loop
        if(this.remain[i].id === this.music.data.id){
          // Remove it and break the loop
          this.remain.splice(i, 1);
          break;
        }
      }
      // Update storage
      storage.update(true);
    }
    // If reponse is incorrect
    else{
      // Remove 1 point
      this.score--;
      // If score is 0, keep it at 0
      if(this.score < 0)
        this.score = 0;
      // Update storage
      storage.update(false);
    }

    // Update score
    this.stats();

    // Launch next question
    this.question();
  },
  // Update user stats
  stats: function(){
    // Update score
    this.scoreContainer.text(this.score);
    // Update found
    this.foundContainer.text(this.found);
  },
  // Reset game, user score,...
  reset: function(){
    // Reset nbChoices
    this.nbChoices = 4;
    // Reset score
    this.score = 0;
    // Initiate musics
    this.musics = storage.musics.slice(0);
    this.remain = storage.musics.slice(0);
  },
  // Pause the game
  pause: function(){

  },
  // Initialize game controls
  controls: function(){
    var _this = this;
    // Open options menu
    $(".options-game").click(function(){
      display.slide('show', 'options');
    });
    // Close options menu
    $(".options .close").click(function(){
      display.slide('hide', 'options');
    });
    // Return to menu
    $(".options .return-menu").click(function(){
      // Pause game
      _this.pause();
      // Show main menu
      display.show(true, 'main-menu', false, true);
      // Hide overlays
      display.slide('hide');
    });
    // Refresh musics list
    $(".options .refresh-music").click(function(){
      // Show main menu
      display.show(true, 'loader', function(){
        scan.listDirectories(function(){
          console.log('Musics refreshed');
        });
      }, true);
      // Hide overlays
      display.slide('hide');
    });
    // Start a new game
    $(".new-game").click(function(){
      _this.new();
    });
    // Load an existing game
    $(".load-game").click(function(){
      // If a game is available, load it
      if(!$(this).hasClass('btn-disabled'))
        _this.load();
    });
    // Choose answer
    $(".game .choices").on('click', '.btn', function(){
      _this.answer($(this));
    });
  },
  // Get a random integer between min and max different of exclusion
  getRand: function(min, max, exclusion){
    // Get random integer between min and max
    var random = Math.floor(Math.random() * (max - min + 1)) + min;
    // Check if there is exclusions
    if(typeof exclusion !== 'undefined'){
      // Check if rand isn't exclude
      while(exclusion.indexOf(random) !== -1){
        random = Math.floor(Math.random() * (max - min + 1)) + min;
      }
      return random;
    }
    else
      return random;
  },
  // Shuffle an array
  shuffle: function(array) {
    var currentIndex = array.length, temporaryValue, randomIndex;
    while(0 !== currentIndex){
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
    return array;
  }
};

var scan = {
  // Vars
  debug: true,
  folders: 0, // Number of folder found during the scan
  files: 0, // Number of files found during the scan
  scannedFolders: 0, // Number of folder scanned
  scannedFiles: 0, // Number
  finished: false, // Check if scan already finished
  directories: [], // Directories to scan
  musics: [], // Musics found ont the device
  // List directories in which we'll look for the files we want
  listDirectories: function(callback){
    var _this = this;
    var directory;
    // In case the user wants to refresh his inapp song list
    this.resetScan();
    //console.log(this.folders, this.files, this.scannedFolders, this.scannedFiles, this.finished, this.directories.length, this.musics.length);
    // Show loader
    display.show(true, 'loader', function(){
      // Loop through cordova.file directories
      for(directory in cordova.file){
        // Get current directory
        var current = cordova.file[directory];
        // If null or undefined, pass it
        if(current == null || typeof current == 'undefined')
          continue;
        // Strip directory to make it usable
        current = _this.stripDirectory(current);
        if(_this.directories.indexOf(current) != -1)
          continue;
        // Push it to directories to scan
        _this.directories.push(current);
      }
      // Debug mode only (less directories to scan)
      if(debug)
        _this.directories = ['file:///storage/extSdCard/Music'];
      // Launch scan
      _this.initScan(callback);
    }, true);
  },
  // Launch scan for each principal directories
  initScan: function(callback){
    var _this = this;
    var i = 0;
    var nbDirectories = this.directories.length;
    for(i; i < nbDirectories; i++){
      var directory = this.directories[i];
      window.resolveLocalFileSystemURL(directory, function(dir, cb){
        _this.folders++;
        _this.scanDirectory(dir, callback);
      });
    }
  },
  // Scan the given directory for files or other directories
  scanDirectory: function(directory, callback){
    var _this = this;
    // Initiate a reader
    var reader = directory.createReader();
    // List entries in directory
    reader.readEntries(function(entries){
      var i = 0;
      var nbEntries = entries.length;
      // Loop through each entries in directory
      for(i; i < nbEntries; i++){
        var entry = entries[i];
        // If entry is a directory, scan the directory
        if(entry.isDirectory){
          _this.folders++;
          _this.scanDirectory(entry, callback);
        }
        // If entry is a file, check type
        else{
          // If it's an audio file add it to the musics
          window.resolveLocalFileSystemURL(entry.nativeURL, function(file){
            _this.files++;
            file.file(function(file){
              // Check if file type is defined
              if(file.type != null && typeof file.type != 'undefined'){
                // Check if file is an audio file
                if(file.type.indexOf('audio') != -1)
                  _this.musics.push(file.localURL);
              }
              // File scanned !
              _this.scannedFiles++;
              // Check if all folders and files have been scanned
              if(_this.scannedFiles == _this.files && _this.scannedFolders == _this.folders && !_this.finished){
                _this.finished = true;
                _this.returnApp();
                if(callback)
                  callback();
                //console.log(_this.folders, _this.files, _this.scannedFolders, _this.scannedFiles, _this.finished, _this.directories.length, _this.musics.length);
              }
            });
          });
        }
      }
      // Directory scanned !
      _this.scannedFolders++;
    });
  },
  // Reset scan datas
  resetScan: function(){
    this.folders = 0;
    this.files = 0;
    this.scannedFolders = 0;
    this.scannedFiles = 0;
    this.finished = false;
    this.directories = [];
    this.musics = [];
  },
  // Return what was found to the app
  returnApp: function(){
    storage.getMusics(this.musics);
  },
  // Strip directory to one folder after root
  stripDirectory: function(directory){
    directory = directory.split(root)[1].split('/')[0];
    return root + directory + '/';
  },
};

var storage = {
  // Vars
  musics: [],
  // Methods
  // Get musics from scan
  getMusics: function(musics){
    if(error.musicLength(musics))
      this.store(musics);
  },
  // Store founded music in current app instance and local storage
  store: function(musics){
    var _this = this;
    var i = 0;
    var treated = 0; // Count treated files (because of async file function)
    var nbMusics = musics.length;
    // Loop through each music to get metadata
    for(i; i < nbMusics; i++){
      window.resolveLocalFileSystemURL(musics[i], function(music, callback){
        // Get file metadata
        music.file(function(file){
          // Check if music already exists in list
          if(!_this.exist(file)){
            // Add an id to the file
            file.id = _this.musics.length;
            // Add a stiped name (TO IMPROVE)
            file.stripName = _this.stripName(file.name);
            // Push file into storage musics
            _this.musics.push(file);
          }
          treated++;
          // Check if all musics have been scanned
          if(treated == nbMusics){
            _this.localStore();
            game.start();
          }
        });
      });
    }
  },
  // Store musics in device's localStorage
  localStore: function(){
    window.localStorage.removeItem('musics');
    window.localStorage.setItem('musics', JSON.stringify(this.musics));
  },
  // Get device's music stocked in localStorage
  getLocalStore: function(){
    var musics = window.localStorage.getItem('musics');
    // If music is found in localStorage
    if(musics != null && typeof musics != 'undefined'){
      // Parse it to set app's musics
      this.musics = JSON.parse(musics);
      game.musics = this.musics.slice(0);
      return true;
    }
    return false;
  },
  // Update user progression
  update: function(all){
    // If update all
    if(all){
      // Update remains
      window.localStorage.removeItem('remain');
      window.localStorage.setItem('remain', JSON.stringify(game.remain));
      // Update found
      window.localStorage.removeItem('found');
      window.localStorage.setItem('found', game.found);
    }
    // Update score
    window.localStorage.removeItem('score');
    window.localStorage.setItem('score', game.score);
  },
  // Get saved game data
  load: function(){
    var data = {
      score: JSON.parse(window.localStorage.getItem('score')),
      found: JSON.parse(window.localStorage.getItem('found')),
      remain: JSON.parse(window.localStorage.getItem('remain')),
    };
    return data;
  },
  // Check if user can load a game
  game: function(){
    var score = window.localStorage.getItem('score');
    var found = window.localStorage.getItem('found');
    var remain = window.localStorage.getItem('remain');
    // If remain is found in localStorage
    if(remain != null && typeof remain != 'undefined'){
      // If found is found in localStorage
      if(found != null && typeof found != 'undefined'){
        // If score is found in localStorage then game can be loaded
        if(score != null && typeof score != 'undefined')
          return true;
        return false;
      }
      return false;
    }
    return false;
  },
  // Clean song name
  stripName: function(name){
    // Remove extension
    var index = name.lastIndexOf('.');
    name = name.slice(0, index);
    // Replace [-_] by space
    name = name.replace(/[_-]/g, ' ');

    return name;
  },
  // Check if file already in musics
  exist: function(file){
    var i = 0;
    var nbMusics = this.musics.length;
    // Loop through each music to check if file already in here
    for(i; i < nbMusics; i++){
      // Check if files have the same name
      if(this.musics[i].name == file.name){
        // Check if files are of the same size
        if(this.musics[i].size == file.size){
          // Check if files have the same duration
          if(this.musics[i].end == file.end)
            return true;
        }
      }
    }
    // File doesn't exist
    return false;
  },
};

var app = {
  // Methods
  // Launch app when device is ready
  init: function(){
    document.addEventListener('deviceready', this.ready, false);
  },
  // Launch directories listing
  ready: function(){
    var _this = app;
    // App focus out handler
    document.addEventListener('pause', _this.pause, false);
    // App focus back handler
    document.addEventListener('resume', _this.resume, false);
    // Check if scan already occured
    if(storage.getLocalStore())
      game.start();
    // Launch device scan
    else
      scan.listDirectories();
  },
  // App focus out
  pause: function(){
    // Pause music
    if(game.music.media)
      game.music.media.pause();
  },
  // App focus back
  resume: function(){
    // Continue music
    if(game.music.media)
      game.music.media.play();
  }
};

// Initialize the app
app.init();
